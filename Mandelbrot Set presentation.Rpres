Mandelbrot Set
========================================================
author: David Amore Cecchini
date: 03/10/2016
autosize: true

Introduction
========================================================

The Madelbrot Set is a mathematical set created by Benoit Mandelbrot in 1979 during his studies on self-similar geometries. Because of his discoveries and studies of those new kind of geometries, Mandelbrot is considered the "father of the fractals".

His motivation on his research can be understood by one famous quote:

"Clouds are not spheres, mountains are not cones, coastlines are not circles, and bark is not smooth, nor does lightning travel in a straight line."
                    Mandelbrot, in his introduction to The Fractal Geometry of Nature


Mandelbrot Set Definition
========================================================

The set is defined in the complex plane (real numbers vs Imaginary numbers) by the points $c$ in which the function $f(z) = z^2 + c$ does not diverge. Or, more precisely, the complex number $c$ belongs to the Mandelbrot Set if and only if the folowing sequence does not diverge: 
$$ 
\begin{equation}
    Z_{n+1} = Z_n^2 + c
\end{equation}
$$

For the computations, it is accepted to define the set (M) as:

$$
\begin{equation}
    c \in M \Leftrightarrow \lim_{n \to \infty}{|Z_{n+1}| \leq 2}
\end{equation}
$$

Shiny Application
========================================================
The Mandelbrot Set is widely used to ilustrate the possibilities to create art ysing maths. In my application I try to ilustrate a few of these possibilities. 

The idea is to create a image and color each pixel according to some different rules. In the application I implemented three options:

- Interior of the border: color the pixels that belongs to the interior of the Mandelbrot Set, so we can see it's form;
- Distance to border: Color the pixels according to the distance to the border of the set;
- XY positive: Color the pixels defined by the points $(x,y)$ where $x*y > 0$.


Results
========================================================
The following output is generated when you chose the option "Distance to border".

```{r, echo=FALSE, fig.align='center'}
## Define variables
max_iteration = 100
xmin=-2
xmax=1
ymin=-1
nx=400
ymax=1.25
ny=400
x0=-2
y0=1.25

# The variable 'y0_aux' is an auxiliary variable for loop control
y0_aux <- y0

# The lenght of the intervals on the image
dx <- (xmax - xmin)/nx
dy <- (ymax - ymin)/nx

## Declare the plot
plot(NULL, xlim=c(1,nx),ylim=c(1,ny), type='n', axes=F, yaxs='i',xaxs='i',xlab="Re(c)", ylab="Im(c)")

for(i in 1:nx){
    for(j in 1:ny){
        
        x <- x0
        y <- y0
        iter <- 0

        while((x*x + y*y) <= 4 && iter < max_iteration){
            x_aux <- x*x - y*y + x0
            y <- 2*x*y + y0

            x <- x_aux

            iter <- iter + 1
        }
        
        ## Color depending on the distance to the border of the set
       
        if(iter < max_iteration){
            log_zn <- log(x*x + y*y) / 2
            nu <- log(log_zn/log(2))/log(2)
            
            iter <- iter + 1 - nu
        }
        
        color <- iter
        
        ## Print the point in the image
        points(i,j,col=color)
        
        y0 <- y0 - dy
    }
    
    y0 <- y0_aux
    x0 <- x0+dx
}
```

